<?php
 declare (strict_types=1); namespace MailPoetVendor\PackageVersions; if (!defined('ABSPATH')) exit; use MailPoetVendor\Composer\Composer; use MailPoetVendor\Composer\Config; use MailPoetVendor\Composer\EventDispatcher\EventSubscriberInterface; use MailPoetVendor\Composer\IO\IOInterface; use MailPoetVendor\Composer\Package\AliasPackage; use MailPoetVendor\Composer\Package\Locker; use MailPoetVendor\Composer\Package\PackageInterface; use MailPoetVendor\Composer\Package\RootPackageInterface; use MailPoetVendor\Composer\Plugin\PluginInterface; use MailPoetVendor\Composer\Script\Event; use MailPoetVendor\Composer\Script\ScriptEvents; use Generator; use RuntimeException; use function array_key_exists; use function array_merge; use function chmod; use function dirname; use function file_exists; use function file_put_contents; use function iterator_to_array; use function rename; use function sprintf; use function uniqid; use function var_export; final class Installer implements \MailPoetVendor\Composer\Plugin\PluginInterface, \MailPoetVendor\Composer\EventDispatcher\EventSubscriberInterface { private static $generatedClassTemplate = <<<'PHP'
<?php

declare(strict_types=1);

namespace PackageVersions;

/**
 * This class is generated by ocramius/package-versions, specifically by
 * @see \PackageVersions\Installer
 *
 * This file is overwritten at every run of `composer install` or `composer update`.
 */
%s
{
    public const ROOT_PACKAGE_NAME = '%s';
    public const VERSIONS          = %s;

    private function __construct()
    {
    }

    /**
     * @throws \OutOfBoundsException If a version cannot be located.
     */
    public static function getVersion(string $packageName) : string
    {
        if (isset(self::VERSIONS[$packageName])) {
            return self::VERSIONS[$packageName];
        }

        throw new \OutOfBoundsException(
            'Required package "' . $packageName . '" is not installed: check your ./vendor/composer/installed.json and/or ./composer.lock files'
        );
    }
}

PHP;
public function activate(\MailPoetVendor\Composer\Composer $composer, \MailPoetVendor\Composer\IO\IOInterface $io) : void { } public static function getSubscribedEvents() : array { return [\MailPoetVendor\Composer\Script\ScriptEvents::POST_INSTALL_CMD => 'dumpVersionsClass', \MailPoetVendor\Composer\Script\ScriptEvents::POST_UPDATE_CMD => 'dumpVersionsClass']; } public static function dumpVersionsClass(\MailPoetVendor\Composer\Script\Event $composerEvent) : void { $composer = $composerEvent->getComposer(); $rootPackage = $composer->getPackage(); $versions = \iterator_to_array(self::getVersions($composer->getLocker(), $rootPackage)); if (!\array_key_exists('ocramius/package-versions', $versions)) { return; } $versionClass = self::generateVersionsClass($rootPackage->getName(), $versions); self::writeVersionClassToFile($versionClass, $composer, $composerEvent->getIO()); } private static function generateVersionsClass(string $rootPackageName, array $versions) : string { return \sprintf( self::$generatedClassTemplate, 'fin' . 'al ' . 'cla' . 'ss ' . 'Versions', $rootPackageName, \var_export($versions, \true) ); } private static function writeVersionClassToFile(string $versionClassSource, \MailPoetVendor\Composer\Composer $composer, \MailPoetVendor\Composer\IO\IOInterface $io) : void { $installPath = self::locateRootPackageInstallPath($composer->getConfig(), $composer->getPackage()) . '/src/PackageVersions/Versions.php'; if (!\file_exists(\dirname($installPath))) { $io->write('<info>ocramius/package-versions:</info> Package not found (probably scheduled for removal); generation of version class skipped.'); return; } $io->write('<info>ocramius/package-versions:</info>  Generating version class...'); $installPathTmp = $installPath . '_' . \uniqid('tmp', \true); \file_put_contents($installPathTmp, $versionClassSource); \chmod($installPathTmp, 0664); \rename($installPathTmp, $installPath); $io->write('<info>ocramius/package-versions:</info> ...done generating version class'); } private static function locateRootPackageInstallPath(\MailPoetVendor\Composer\Config $composerConfig, \MailPoetVendor\Composer\Package\RootPackageInterface $rootPackage) : string { if (self::getRootPackageAlias($rootPackage)->getName() === 'ocramius/package-versions') { return \dirname($composerConfig->get('vendor-dir')); } return $composerConfig->get('vendor-dir') . '/ocramius/package-versions'; } private static function getRootPackageAlias(\MailPoetVendor\Composer\Package\RootPackageInterface $rootPackage) : \MailPoetVendor\Composer\Package\PackageInterface { $package = $rootPackage; while ($package instanceof \MailPoetVendor\Composer\Package\AliasPackage) { $package = $package->getAliasOf(); } return $package; } private static function getVersions(\MailPoetVendor\Composer\Package\Locker $locker, \MailPoetVendor\Composer\Package\RootPackageInterface $rootPackage) : \Generator { $lockData = $locker->getLockData(); $lockData['packages-dev'] = $lockData['packages-dev'] ?? []; foreach (\array_merge($lockData['packages'], $lockData['packages-dev']) as $package) { (yield $package['name'] => $package['version'] . '@' . ($package['source']['reference'] ?? $package['dist']['reference'] ?? '')); } foreach ($rootPackage->getReplaces() as $replace) { $version = $replace->getPrettyConstraint(); if ($version === 'self.version') { $version = $rootPackage->getPrettyVersion(); } (yield $replace->getTarget() => $version . '@' . $rootPackage->getSourceReference()); } (yield $rootPackage->getName() => $rootPackage->getPrettyVersion() . '@' . $rootPackage->getSourceReference()); } } 